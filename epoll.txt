多路复用函数会阻塞的监听一组文件描述符
当文件描述符的状态转变为可读或者可写时
它会返回可读或者可写事件的个数
应用程序就可以在输入的文件描述符中查找哪些可读或者可写
然后执行相应的操作

ref: https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-netpoller/


events可以是以下几个宏的集合：

EPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；
EPOLLOUT：表示对应的文件描述符可以写；
EPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；
EPOLLERR：表示对应的文件描述符发生错误；
EPOLLHUP：表示对应的文件描述符被挂断；
EPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。
EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里